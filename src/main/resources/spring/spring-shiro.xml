<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:util="http://www.springframework.org/schema/util" 
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop.xsd">

  <description>Shiro Configuration</description>

  <!--安全管理器 -->
  <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    <!--设置自定义Realm -->
    <property name="realm" ref="shiroDbRealm" />
    <!--将缓存管理器，交给安全管理器 -->
    <property name="cacheManager" ref="redisCacheManager" />
    <!-- 记住密码管理 -->
    <property name="rememberMeManager" ref="rememberMeManager" />
    <property name="sessionManager" ref="sessionManager" />
  </bean>
  
  <!--shiro-redis redisCacheManager-->
  <bean id="redisCacheManager" class="org.cloud.activiti.redis.RedisCacheManager">
    <property name="redisManager" ref="redisManager"/>
  </bean>

  <!-- 項目自定义的Realm -->
  <bean id="shiroDbRealm" class="org.cloud.activiti.security.ShiroDbRealm">
    <constructor-arg index="0" name="cacheManager" ref="redisCacheManager" />
    <constructor-arg index="1" name="matcher" ref="credentialsMatcher" />
  </bean>

  <bean id="passwordService" class="org.apache.shiro.authc.credential.DefaultPasswordService">
    <property name="hashService" ref="hashService" />
  </bean>

  <bean id="hashService" class="org.apache.shiro.crypto.hash.DefaultHashService">
    <property name="hashAlgorithmName" value="SHA-512" />
    <property name="hashIterations" value="500000" />
    <property name="generatePublicSalt" value="true" />
  </bean>

  <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.PasswordMatcher">
    <property name="passwordService" ref="passwordService" />
  </bean>

  <!-- 记住密码Cookie -->
  <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
    <constructor-arg value="rememberMe" />
    <property name="httpOnly" value="true" />
    <!-- 7天,采用spring el计算方便修改[细节决定成败]！ -->
    <property name="maxAge" value="#{7 * 24 * 60 * 60}" />
  </bean>

  <!-- rememberMe管理器,cipherKey生成见{@code Base64Test.java} -->
  <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
    <property name="cipherKey" 
      value="#{T(org.apache.shiro.codec.Base64).decode('5aaC5qKm5oqA5pyvAAAAAA==')}" />
    <property name="cookie" ref="rememberMeCookie" />
  </bean>

  <!-- Shiro Filter -->
  <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    <!-- 安全管理器 -->
    <property name="securityManager" ref="securityManager" />
    <!-- 默认的登陆访问url -->
    <property name="loginUrl" value="/login" />
    <!-- 登陆成功后跳转的url -->
    <property name="successUrl" value="/index" />
    <!-- 没有权限跳转的url -->
    <property name="unauthorizedUrl" value="/unauth" />
    <!--URL的拦截-->
    <property name="filterChainDefinitions">
      <value>
        <!-- anon 不需要认证 authc 需要认证 user 验证通过或RememberMe登录的都可以 -->
        /assets/** = anon
        /login = anon
        /** = kickout,user
      </value>
    </property>
    <property name="filters">
      <map>
        <entry key="user" value-ref="ajaxSessionFilter" />
        <entry key="kickout" value-ref="kickoutSessionControlFilter" />
      </map>
    </property>
  </bean>
  <!-- ajax session超时时处理 -->
  <bean id="ajaxSessionFilter" class="org.cloud.activiti.security.ShiroAjaxSessionFilter" />
  
  <!-- 并发踢出 
       kickoutAfter：是否踢出后来登录的，默认是false 
       kickoutUrl：被踢出后重定向到的地址
       maxSession：同一个用户最大的会话数，默认1
  -->
  <bean id="kickoutSessionControlFilter" class="org.cloud.activiti.security.KickoutSessionControlFilter">
    <property name="redisManager" ref="redisManager"/>
    <property name="sessionManager" ref="sessionManager"/>
    <property name="kickoutAfter" value="false"/>
    <property name="maxSession" value="1"/>
    <property name="kickoutUrl" value="/login?kickout=1"/>
  </bean>

  <!-- 会话管理器 -->
  <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
    <!-- 设置全局会话超时时间 半小时 -->
    <property name="globalSessionTimeout" value="#{30 * 60 * 1000}" />
    <property name="deleteInvalidSessions" value="true"/>  
    <!-- 去掉URL中的JSESSIONID -->
    <property name="sessionIdUrlRewritingEnabled" value="false"/>
    <property name="sessionDAO" ref="redisSessionDAO" />
    <property name="sessionValidationSchedulerEnabled" value="true"/>
    <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
    <property name="sessionIdCookieEnabled" value="true" />
    <property name="sessionIdCookie" ref="simpleCookie" />
  </bean>

  <!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 
    等默认JSESSIONID, 当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
  <bean id="simpleCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
    <constructor-arg name="name" value="SHIRO-SESSIONID" />
    <!-- JSESSIONID的path为/用于多个系统共享JSESSIONID 
    <property name="path" value="/" />-->
    <!-- 浏览器中通过document.cookie可以获取cookie属性，设置了HttpOnly=true,在脚本中就不能的到cookie， 可以避免cookie被盗用 
    <property name="httpOnly" value="true"/>-->
  </bean>

  <!-- 会话DAO 用于会话的CRUD -->
  <bean id="redisSessionDAO" class="org.cloud.activiti.redis.RedisSessionDAO">
    <property name="redisManager" ref="redisManager" />
    <!-- 定义该Session DAO操作中所使用的ID生成器 --> 
    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
  </bean>
  
  <!-- 会话验证调度器 -->
  <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler ">
    <property name="interval" value="1800000"/>
    <property name="sessionManager" ref="sessionManager"/>
  </bean>
  
  <!-- 定义Session ID生成管理器 --> 
  <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

  <!-- 在方法中 注入 securityManager ，进行代理控制 -->
  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
    <property name="arguments" ref="securityManager" />
  </bean>

  <!-- Shiro生命周期处理器 保证实现了Shiro内部lifecycle函数的bean执行 -->  
  <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

  <!--开启shiro的注解-->
  <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
    depends-on="lifecycleBeanPostProcessor" >
    <property name="proxyTargetClass" value="true" />
  </bean>

  <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    <property name="securityManager" ref="securityManager" />
  </bean>  
</beans>